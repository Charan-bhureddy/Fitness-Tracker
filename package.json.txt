import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, collection, query, onSnapshot } from 'firebase/firestore';

// Define Firebase configuration and app ID (for local development, you might put these in a .env file)
// For this example, we'll use placeholder values. In a real app, these would come from your Firebase project.
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};
const appId = "your-activity-tracker-app-id"; // A unique ID for your app within your Firebase project's artifacts
const initialAuthToken = null; // This token is usually provided by the environment in Canvas, not needed for local setup

// Initialize Firebase App outside of the component to avoid re-initialization
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// Main App component
const App = () => {
  // State variables for tracking activities
  const [steps, setSteps] = useState('');
  const [cyclingDistance, setCyclingDistance] = useState('');
  const [gymWorkoutDuration, setGymWorkoutDuration] = useState('');
  const [activityHistory, setActivityHistory] = useState([]);
  const [currentDate, setCurrentDate] = useState('');
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [message, setMessage] = useState(''); // For user messages

  // Effect to handle Firebase authentication and set up user ID
  useEffect(() => {
    const authenticateFirebase = async () => {
      try {
        if (initialAuthToken) {
          await signInWithCustomToken(auth, initialAuthToken);
        } else {
          await signInAnonymously(auth);
        }
      } catch (error) {
        console.error("Firebase authentication error:", error);
        setMessage("Failed to authenticate with Firebase. Please try again.");
      }
    };

    // Listen for authentication state changes
    const unsubscribeAuth = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserId(user.uid);
        setIsAuthReady(true);
        console.log("Authenticated user ID:", user.uid);
      } else {
        // If no user, sign in
        authenticateFirebase();
      }
    });

    // Set the current date initially
    const today = new Date();
    setCurrentDate(today.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }));

    // Cleanup subscription on unmount
    return () => unsubscribeAuth();
  }, []); // Empty dependency array means this effect runs once on mount

  // Effect to fetch and listen for real-time updates to activity data from Firestore
  useEffect(() => {
    if (!isAuthReady || !userId) {
      console.log("Auth not ready or userId not available, skipping Firestore listener.");
      return;
    }

    // Define the path to the user's activities collection
    const activitiesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/activities`);
    // Create a query to order by date (descending)
    const q = query(activitiesCollectionRef);

    console.log("Setting up Firestore snapshot listener for user:", userId);

    // Set up the real-time listener
    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {
      const activities = [];
      snapshot.forEach((doc) => {
        activities.push({ id: doc.id, ...doc.data() });
      });
      // Sort activities by date in descending order in memory
      activities.sort((a, b) => new Date(b.date) - new Date(a.date));
      setActivityHistory(activities);
      console.log("Activity history updated:", activities);
    }, (error) => {
      console.error("Error fetching activities:", error);
      setMessage("Failed to load activity history.");
    });

    // Cleanup the Firestore listener on unmount or when userId/isAuthReady changes
    return () => {
      console.log("Unsubscribing Firestore listener.");
      unsubscribeFirestore();
    };
  }, [isAuthReady, userId]); // Re-run when auth state or userId changes

  // Function to handle logging activity
  const handleLogActivity = async () => {
    if (!userId) {
      setMessage("User not authenticated. Please wait a moment and try again.");
      return;
    }

    // Get today's date in 'YYYY-MM-DD' format for the document ID
    const today = new Date();
    const dateId = today.toISOString().split('T')[0]; // e.g., "2023-10-27"

    // Parse input values, default to 0 if empty
    const currentSteps = parseInt(steps) || 0;
    const currentCyclingDistance = parseFloat(cyclingDistance) || 0;
    const currentGymWorkoutDuration = parseFloat(gymWorkoutDuration) || 0;

    if (currentSteps < 0 || currentCyclingDistance < 0 || currentGymWorkoutDuration < 0) {
      setMessage("Please enter non-negative values for activities.");
      return;
    }

    const activityData = {
      date: dateId,
      steps: currentSteps,
      cyclingDistance: currentCyclingDistance,
      gymWorkoutDuration: currentGymWorkoutDuration,
      timestamp: new Date().toISOString(), // Timestamp for when it was logged
    };

    try {
      // Set the document with the date as its ID, overwriting if it exists
      // This ensures only one entry per day
      const docRef = doc(db, `artifacts/${appId}/users/${userId}/activities`, dateId);
      await setDoc(docRef, activityData, { merge: true }); // Use merge to update existing fields or create new if doc doesn't exist
      setMessage('Activity logged successfully!');
      // Clear input fields after logging
      setSteps('');
      setCyclingDistance('');
      setGymWorkoutDuration('');
    } catch (e) {
      console.error("Error adding document: ", e);
      setMessage("Error logging activity. Please try again.");
    }
  };

  // Function to calculate total for a specific activity from history
  const getTotalForActivity = (activityType) => {
    return activityHistory.reduce((total, entry) => total + (entry[activityType] || 0), 0);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 p-4 font-inter flex items-center justify-center">
      <div className="bg-white rounded-2xl shadow-xl p-6 md:p-8 w-full max-w-2xl transform transition-all duration-300 hover:shadow-2xl">
        <h1 className="text-3xl md:text-4xl font-bold text-indigo-700 mb-6 text-center">
          My Daily Activity Tracker
        </h1>

        {userId && (
          <p className="text-sm text-gray-500 mb-4 text-center break-all">
            Your User ID: <span className="font-mono text-indigo-600">{userId}</span>
          </p>
        )}

        <div className="bg-indigo-50 p-4 rounded-xl mb-6 text-center">
          <p className="text-lg text-indigo-800 font-semibold">{currentDate}</p>
        </div>

        {message && (
          <div className="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-md relative mb-4" role="alert">
            <span className="block sm:inline">{message}</span>
            <span className="absolute top-0 bottom-0 right-0 px-4 py-3" onClick={() => setMessage('')}>
              <svg className="fill-current h-6 w-6 text-blue-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
            </span>
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          {/* Steps Input */}
          <div className="flex flex-col">
            <label htmlFor="steps" className="text-gray-700 font-medium mb-2">Steps</label>
            <input
              type="number"
              id="steps"
              value={steps}
              onChange={(e) => setSteps(e.target.value)}
              placeholder="e.g., 10000"
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition-all duration-200"
            />
          </div>

          {/* Cycling Distance Input */}
          <div className="flex flex-col">
            <label htmlFor="cycling" className="text-gray-700 font-medium mb-2">Cycling (km)</label>
            <input
              type="number"
              id="cycling"
              value={cyclingDistance}
              onChange={(e) => setCyclingDistance(e.target.value)}
              placeholder="e.g., 15.5"
              step="0.1"
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition-all duration-200"
            />
          </div>

          {/* Gym Workout Duration Input */}
          <div className="flex flex-col">
            <label htmlFor="gym" className="text-gray-700 font-medium mb-2">Gym Workout (min)</label>
            <input
              type="number"
              id="gym"
              value={gymWorkoutDuration}
              onChange={(e) => setGymWorkoutDuration(e.target.value)}
              placeholder="e.g., 60"
              className="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-400 focus:border-transparent transition-all duration-200"
            />
          </div>
        </div>

        {/* Log Activity Button */}
        <button
          onClick={handleLogActivity}
          className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition-all duration-300 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 mb-6"
        >
          Log Activity for Today
        </button>

        {/* Total Summary */}
        <div className="bg-green-50 p-4 rounded-xl mb-6 shadow-sm">
          <h2 className="text-xl font-semibold text-green-800 mb-3">Total Activity Summary</h2>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 text-green-700">
            <p className="flex items-center"><span className="text-2xl mr-2">👣</span>Steps: <span className="font-bold ml-1">{getTotalForActivity('steps').toLocaleString()}</span></p>
            <p className="flex items-center"><span className="text-2xl mr-2">🚴</span>Cycling: <span className="font-bold ml-1">{getTotalForActivity('cyclingDistance').toFixed(1)} km</span></p>
            <p className="flex items-center"><span className="text-2xl mr-2">🏋️</span>Gym: <span className="font-bold ml-1">{getTotalForActivity('gymWorkoutDuration').toFixed(0)} min</span></p>
          </div>
        </div>

        {/* Activity History */}
        <div className="bg-gray-50 p-4 rounded-xl shadow-sm">
          <h2 className="text-xl font-semibold text-gray-800 mb-3">Activity History</h2>
          {activityHistory.length === 0 ? (
            <p className="text-gray-600 italic">No activities logged yet.</p>
          ) : (
            <ul className="space-y-3">
              {activityHistory.map((activity) => (
                <li key={activity.date} className="bg-white p-3 rounded-lg shadow-sm border border-gray-200 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                  <span className="font-semibold text-indigo-600 mb-1 sm:mb-0">
                    {new Date(activity.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                  </span>
                  <div className="text-gray-700 text-sm sm:text-base flex flex-wrap gap-x-4 gap-y-1">
                    <span>Steps: <span className="font-medium">{activity.steps.toLocaleString()}</span></span>
                    <span>Cycling: <span className="font-medium">{activity.cyclingDistance.toFixed(1)} km</span></span>
                    <span>Gym: <span className="font-medium">{activity.gymWorkoutDuration.toFixed(0)} min</span></span>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;
